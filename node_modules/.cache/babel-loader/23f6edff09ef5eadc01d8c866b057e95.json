{"ast":null,"code":"const testSketch = p => {\n  let rotation = 0;\n  let xspacing = 8; // Distance between each horizontal location\n\n  let w; // Width of entire wave\n\n  let theta = 0.0; // Start angle at 0\n\n  let amplitude = 20; // Height of wave\n\n  let period = 600.0; // How many pixels before the wave repeats\n\n  let dx; // Value for incrementing x\n\n  let yvalues; // Using an array to store height values for the wave\n\n  let TWO_PI = 2 * 3.14159; //初期設定\n\n  p.setup = () => {\n    // p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL)\n    p.createCanvas(p.windowWidth * 2, 100);\n    w = Math.max(p.windowWidth, 1600);\n    dx = TWO_PI / period * xspacing;\n    yvalues = new Array(Math.floor(w / xspacing));\n  }; //毎フレームごとの描画内容\n\n\n  p.draw = () => {\n    p.background(255);\n    p.calcWave();\n    p.renderWave();\n    p.renderWave2();\n  };\n\n  p.calcWave = () => {\n    // Increment theta (try different values for\n    // 'angular velocity' here)\n    theta += 0.02; // For every x value, calculate a y value with sine function\n\n    let x = theta;\n\n    for (let i = 0; i < yvalues.length; i++) {\n      yvalues[i] = Math.sin(x) * amplitude;\n      x += dx;\n    }\n  };\n\n  p.renderWave = () => {\n    p.noStroke();\n    p.fill(186); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < yvalues.length; x++) {\n      p.ellipse(x * xspacing, 200 / 4 + yvalues[x], 1, 1);\n    }\n  };\n\n  p.renderWave2 = () => {\n    p.noStroke();\n    p.fill(213); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < yvalues.length; x++) {\n      p.ellipse(x * xspacing - 50, 200 / 4 + yvalues[x] * 0.6, 1, 1);\n    }\n  };\n};\n\nexport default testSketch;","map":{"version":3,"sources":["/Users/YuOhno/portfoliov3/src/components/animation/wave.js"],"names":["testSketch","p","rotation","xspacing","w","theta","amplitude","period","dx","yvalues","TWO_PI","setup","createCanvas","windowWidth","Math","max","Array","floor","draw","background","calcWave","renderWave","renderWave2","x","i","length","sin","noStroke","fill","ellipse"],"mappings":"AAAA,MAAMA,UAAU,GAAIC,CAAD,IAAO;AACtB,MAAIC,QAAQ,GAAG,CAAf;AACA,MAAIC,QAAQ,GAAG,CAAf,CAFsB,CAEJ;;AAClB,MAAIC,CAAJ,CAHsB,CAGf;;AACP,MAAIC,KAAK,GAAG,GAAZ,CAJsB,CAIL;;AACjB,MAAIC,SAAS,GAAG,EAAhB,CALsB,CAKF;;AACpB,MAAIC,MAAM,GAAG,KAAb,CANsB,CAMF;;AACpB,MAAIC,EAAJ,CAPsB,CAOd;;AACR,MAAIC,OAAJ,CARsB,CAQT;;AACb,MAAIC,MAAM,GAAG,IAAE,OAAf,CATsB,CAWtB;;AACAT,EAAAA,CAAC,CAACU,KAAF,GAAU,MAAM;AACZ;AACAV,IAAAA,CAAC,CAACW,YAAF,CAAeX,CAAC,CAACY,WAAF,GAAc,CAA7B,EAA+B,GAA/B;AACAT,IAAAA,CAAC,GAAGU,IAAI,CAACC,GAAL,CAASd,CAAC,CAACY,WAAX,EAAwB,IAAxB,CAAJ;AACAL,IAAAA,EAAE,GAAIE,MAAM,GAAGH,MAAV,GAAoBJ,QAAzB;AACAM,IAAAA,OAAO,GAAG,IAAIO,KAAJ,CAAUF,IAAI,CAACG,KAAL,CAAWb,CAAC,GAAGD,QAAf,CAAV,CAAV;AACH,GAND,CAZsB,CAqBtB;;;AACAF,EAAAA,CAAC,CAACiB,IAAF,GAAS,MAAM;AACXjB,IAAAA,CAAC,CAACkB,UAAF,CAAa,GAAb;AACAlB,IAAAA,CAAC,CAACmB,QAAF;AACAnB,IAAAA,CAAC,CAACoB,UAAF;AACApB,IAAAA,CAAC,CAACqB,WAAF;AACH,GALD;;AAOArB,EAAAA,CAAC,CAACmB,QAAF,GAAa,MAAM;AACf;AACA;AACAf,IAAAA,KAAK,IAAI,IAAT,CAHe,CAKf;;AACA,QAAIkB,CAAC,GAAGlB,KAAR;;AACA,SAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,OAAO,CAACgB,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvCf,MAAAA,OAAO,CAACe,CAAD,CAAP,GAAaV,IAAI,CAACY,GAAL,CAASH,CAAT,IAAcjB,SAA3B;AACAiB,MAAAA,CAAC,IAAIf,EAAL;AACD;AACJ,GAXD;;AAaAP,EAAAA,CAAC,CAACoB,UAAF,GAAe,MAAM;AACjBpB,IAAAA,CAAC,CAAC0B,QAAF;AACA1B,IAAAA,CAAC,CAAC2B,IAAF,CAAO,GAAP,EAFiB,CAGjB;;AACA,SAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,OAAO,CAACgB,MAA5B,EAAoCF,CAAC,EAArC,EAAyC;AACvCtB,MAAAA,CAAC,CAAC4B,OAAF,CAAUN,CAAC,GAAGpB,QAAd,EAAwB,MAAM,CAAN,GAAUM,OAAO,CAACc,CAAD,CAAzC,EAA8C,CAA9C,EAAiD,CAAjD;AACD;AACJ,GAPD;;AAUAtB,EAAAA,CAAC,CAACqB,WAAF,GAAgB,MAAM;AAClBrB,IAAAA,CAAC,CAAC0B,QAAF;AACA1B,IAAAA,CAAC,CAAC2B,IAAF,CAAO,GAAP,EAFkB,CAGlB;;AACA,SAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,OAAO,CAACgB,MAA5B,EAAoCF,CAAC,EAArC,EAAyC;AACvCtB,MAAAA,CAAC,CAAC4B,OAAF,CAAUN,CAAC,GAAGpB,QAAJ,GAAe,EAAzB,EAA6B,MAAM,CAAN,GAAUM,OAAO,CAACc,CAAD,CAAP,GAAW,GAAlD,EAAuD,CAAvD,EAA0D,CAA1D;AACD;AACJ,GAPD;AASH,CA7DD;;AA+DA,eAAevB,UAAf","sourcesContent":["const testSketch = (p) => {\n    let rotation = 0\n    let xspacing = 8; // Distance between each horizontal location\n    let w; // Width of entire wave\n    let theta = 0.0; // Start angle at 0\n    let amplitude = 20; // Height of wave\n    let period = 600.0; // How many pixels before the wave repeats\n    let dx; // Value for incrementing x\n    let yvalues; // Using an array to store height values for the wave\n    let TWO_PI = 2*3.14159;\n\n    //初期設定\n    p.setup = () => {\n        // p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL)\n        p.createCanvas(p.windowWidth*2,100)\n        w = Math.max(p.windowWidth, 1600);\n        dx = (TWO_PI / period) * xspacing;\n        yvalues = new Array(Math.floor(w / xspacing));\n    }\n\n  \n    //毎フレームごとの描画内容\n    p.draw = () => {\n        p.background(255)\n        p.calcWave();\n        p.renderWave();\n        p.renderWave2();\n    }\n\n    p.calcWave = () => {\n        // Increment theta (try different values for\n        // 'angular velocity' here)\n        theta += 0.02;\n      \n        // For every x value, calculate a y value with sine function\n        let x = theta;\n        for (let i = 0; i < yvalues.length; i++) {\n          yvalues[i] = Math.sin(x) * amplitude;\n          x += dx;\n        }\n    }\n\n    p.renderWave = () => {\n        p.noStroke();\n        p.fill(186);\n        // A simple way to draw the wave with an ellipse at each location\n        for (let x = 0; x < yvalues.length; x++) {\n          p.ellipse(x * xspacing, 200 / 4 + yvalues[x], 1, 1);\n        }\n    }\n\n\n    p.renderWave2 = () => {\n        p.noStroke();\n        p.fill(213);\n        // A simple way to draw the wave with an ellipse at each location\n        for (let x = 0; x < yvalues.length; x++) {\n          p.ellipse(x * xspacing - 50, 200 / 4 + yvalues[x]*0.6, 1, 1);\n        }\n    }\n\n}\n\nexport default testSketch"]},"metadata":{},"sourceType":"module"}