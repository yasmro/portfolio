{"ast":null,"code":"const testSketch = p => {\n  let rotation = 0;\n  let xspacing = 1; // Distance between each horizontal location\n\n  let w; // Width of entire wave\n\n  let theta = 0.0; // Start angle at 0\n\n  let amplitude = 8; // Height of wave\n\n  let period = 500.0; // How many pixels before the wave repeats\n\n  let dx; // Value for incrementing x\n\n  let yvalues; // Using an array to store height values for the wave\n\n  let TWO_PI = 2 * 3.14159; //初期設定\n\n  p.setup = () => {\n    // p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL)\n    p.createCanvas(p.windowWidth, 200);\n    w = p.windowWidth + 1;\n    dx = TWO_PI / period * xspacing;\n    yvalues = new Array(Math.floor(w / xspacing));\n  }; //毎フレームごとの描画内容\n\n\n  p.draw = () => {\n    p.background(255);\n    p.calcWave();\n    p.renderWave();\n  };\n\n  p.calcWave = () => {\n    // Increment theta (try different values for\n    // 'angular velocity' here)\n    theta += 0.02; // For every x value, calculate a y value with sine function\n\n    let x = theta;\n\n    for (let i = 0; i < yvalues.length; i++) {\n      yvalues[i] = Math.sin(x) * amplitude;\n      x += dx;\n    }\n  };\n\n  p.renderWave = () => {\n    p.noStroke();\n    p.fill(40); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < yvalues.length; x++) {\n      p.ellipse(x * xspacing, yvalues[x], 1, 1);\n    }\n  };\n};\n\nexport default testSketch;","map":{"version":3,"sources":["/Users/YuOhno/portfoliov3/src/components/animation/testSketch.js"],"names":["testSketch","p","rotation","xspacing","w","theta","amplitude","period","dx","yvalues","TWO_PI","setup","createCanvas","windowWidth","Array","Math","floor","draw","background","calcWave","renderWave","x","i","length","sin","noStroke","fill","ellipse"],"mappings":"AAAA,MAAMA,UAAU,GAAIC,CAAD,IAAO;AACtB,MAAIC,QAAQ,GAAG,CAAf;AACA,MAAIC,QAAQ,GAAG,CAAf,CAFsB,CAEJ;;AAClB,MAAIC,CAAJ,CAHsB,CAGf;;AACP,MAAIC,KAAK,GAAG,GAAZ,CAJsB,CAIL;;AACjB,MAAIC,SAAS,GAAG,CAAhB,CALsB,CAKH;;AACnB,MAAIC,MAAM,GAAG,KAAb,CANsB,CAMF;;AACpB,MAAIC,EAAJ,CAPsB,CAOd;;AACR,MAAIC,OAAJ,CARsB,CAQT;;AACb,MAAIC,MAAM,GAAG,IAAE,OAAf,CATsB,CAWtB;;AACAT,EAAAA,CAAC,CAACU,KAAF,GAAU,MAAM;AACZ;AACAV,IAAAA,CAAC,CAACW,YAAF,CAAeX,CAAC,CAACY,WAAjB,EAA6B,GAA7B;AACAT,IAAAA,CAAC,GAAGH,CAAC,CAACY,WAAF,GAAgB,CAApB;AACAL,IAAAA,EAAE,GAAIE,MAAM,GAAGH,MAAV,GAAoBJ,QAAzB;AACAM,IAAAA,OAAO,GAAG,IAAIK,KAAJ,CAAUC,IAAI,CAACC,KAAL,CAAWZ,CAAC,GAAGD,QAAf,CAAV,CAAV;AACH,GAND,CAZsB,CAqBtB;;;AACAF,EAAAA,CAAC,CAACgB,IAAF,GAAS,MAAM;AACXhB,IAAAA,CAAC,CAACiB,UAAF,CAAa,GAAb;AACAjB,IAAAA,CAAC,CAACkB,QAAF;AACAlB,IAAAA,CAAC,CAACmB,UAAF;AACH,GAJD;;AAMAnB,EAAAA,CAAC,CAACkB,QAAF,GAAa,MAAM;AACf;AACA;AACAd,IAAAA,KAAK,IAAI,IAAT,CAHe,CAKf;;AACA,QAAIgB,CAAC,GAAGhB,KAAR;;AACA,SAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,OAAO,CAACc,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvCb,MAAAA,OAAO,CAACa,CAAD,CAAP,GAAaP,IAAI,CAACS,GAAL,CAASH,CAAT,IAAcf,SAA3B;AACAe,MAAAA,CAAC,IAAIb,EAAL;AACD;AACJ,GAXD;;AAaAP,EAAAA,CAAC,CAACmB,UAAF,GAAe,MAAM;AACjBnB,IAAAA,CAAC,CAACwB,QAAF;AACAxB,IAAAA,CAAC,CAACyB,IAAF,CAAO,EAAP,EAFiB,CAGjB;;AACA,SAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,OAAO,CAACc,MAA5B,EAAoCF,CAAC,EAArC,EAAyC;AACvCpB,MAAAA,CAAC,CAAC0B,OAAF,CAAUN,CAAC,GAAGlB,QAAd,EAAyBM,OAAO,CAACY,CAAD,CAAhC,EAAqC,CAArC,EAAwC,CAAxC;AACD;AACJ,GAPD;AAYH,CArDD;;AAuDA,eAAerB,UAAf","sourcesContent":["const testSketch = (p) => {\n    let rotation = 0\n    let xspacing = 1; // Distance between each horizontal location\n    let w; // Width of entire wave\n    let theta = 0.0; // Start angle at 0\n    let amplitude = 8; // Height of wave\n    let period = 500.0; // How many pixels before the wave repeats\n    let dx; // Value for incrementing x\n    let yvalues; // Using an array to store height values for the wave\n    let TWO_PI = 2*3.14159;\n\n    //初期設定\n    p.setup = () => {\n        // p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL)\n        p.createCanvas(p.windowWidth,200)\n        w = p.windowWidth + 1;\n        dx = (TWO_PI / period) * xspacing;\n        yvalues = new Array(Math.floor(w / xspacing));\n    }\n\n  \n    //毎フレームごとの描画内容\n    p.draw = () => {\n        p.background(255)\n        p.calcWave();\n        p.renderWave();\n    }\n\n    p.calcWave = () => {\n        // Increment theta (try different values for\n        // 'angular velocity' here)\n        theta += 0.02;\n      \n        // For every x value, calculate a y value with sine function\n        let x = theta;\n        for (let i = 0; i < yvalues.length; i++) {\n          yvalues[i] = Math.sin(x) * amplitude;\n          x += dx;\n        }\n    }\n\n    p.renderWave = () => {\n        p.noStroke();\n        p.fill(40);\n        // A simple way to draw the wave with an ellipse at each location\n        for (let x = 0; x < yvalues.length; x++) {\n          p.ellipse(x * xspacing,  yvalues[x], 1, 1);\n        }\n    }\n\n\n\n\n}\n\nexport default testSketch"]},"metadata":{},"sourceType":"module"}