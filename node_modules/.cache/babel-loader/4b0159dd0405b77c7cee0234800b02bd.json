{"ast":null,"code":"const testSketch = p => {\n  let rotation = 0;\n  let xspacing = 1; // Distance between each horizontal location\n\n  let w; // Width of entire wave\n\n  let theta = 0.0; // Start angle at 0\n\n  let amplitude = 35.0; // Height of wave\n\n  let period = 500.0; // How many pixels before the wave repeats\n\n  let dx; // Value for incrementing x\n\n  let yvalues; // Using an array to store height values for the wave\n  //初期設定\n\n  p.setup = () => {\n    p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL);\n    w = width + 1;\n    dx = TWO_PI / period * xspacing;\n    yvalues = new Array(floor(w / xspacing));\n  };\n\n  p.draw = () => {\n    background(0);\n    calcWave();\n    renderWave();\n  };\n\n  p.calcWave = () => {\n    // Increment theta (try different values for\n    // 'angular velocity' here)\n    theta += 0.02; // For every x value, calculate a y value with sine function\n\n    let x = theta;\n\n    for (let i = 0; i < yvalues.length; i++) {\n      yvalues[i] = sin(x) * amplitude;\n      x += dx;\n    }\n  };\n\n  p.renderWave = props => {\n    noStroke();\n    fill(255); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < yvalues.length; x++) {\n      ellipse(x * xspacing, height / 2 + yvalues[x], 1, 1);\n    }\n  };\n};\n\nexport default testSketch;","map":{"version":3,"sources":["/Users/YuOhno/portfoliov3/src/components/animation/testSketch.js"],"names":["testSketch","p","rotation","xspacing","w","theta","amplitude","period","dx","yvalues","setup","createCanvas","windowWidth","windowHeight","WEBGL","width","TWO_PI","Array","floor","draw","background","calcWave","renderWave","x","i","length","sin","props","noStroke","fill","ellipse","height"],"mappings":"AAAA,MAAMA,UAAU,GAAIC,CAAD,IAAO;AACtB,MAAIC,QAAQ,GAAG,CAAf;AACA,MAAIC,QAAQ,GAAG,CAAf,CAFsB,CAEJ;;AAClB,MAAIC,CAAJ,CAHsB,CAGf;;AACP,MAAIC,KAAK,GAAG,GAAZ,CAJsB,CAIL;;AACjB,MAAIC,SAAS,GAAG,IAAhB,CALsB,CAKA;;AACtB,MAAIC,MAAM,GAAG,KAAb,CANsB,CAMF;;AACpB,MAAIC,EAAJ,CAPsB,CAOd;;AACR,MAAIC,OAAJ,CARsB,CAQT;AAEb;;AACAR,EAAAA,CAAC,CAACS,KAAF,GAAU,MAAM;AACZT,IAAAA,CAAC,CAACU,YAAF,CAAeV,CAAC,CAACW,WAAjB,EAA8BX,CAAC,CAACY,YAAhC,EAA8CZ,CAAC,CAACa,KAAhD;AACAV,IAAAA,CAAC,GAAGW,KAAK,GAAG,CAAZ;AACAP,IAAAA,EAAE,GAAIQ,MAAM,GAAGT,MAAV,GAAoBJ,QAAzB;AACAM,IAAAA,OAAO,GAAG,IAAIQ,KAAJ,CAAUC,KAAK,CAACd,CAAC,GAAGD,QAAL,CAAf,CAAV;AACH,GALD;;AAQAF,EAAAA,CAAC,CAACkB,IAAF,GAAS,MAAM;AACXC,IAAAA,UAAU,CAAC,CAAD,CAAV;AACAC,IAAAA,QAAQ;AACRC,IAAAA,UAAU;AACX,GAJH;;AAMArB,EAAAA,CAAC,CAACoB,QAAF,GAAa,MAAM;AACf;AACA;AACAhB,IAAAA,KAAK,IAAI,IAAT,CAHe,CAKf;;AACA,QAAIkB,CAAC,GAAGlB,KAAR;;AACA,SAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,OAAO,CAACgB,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvCf,MAAAA,OAAO,CAACe,CAAD,CAAP,GAAaE,GAAG,CAACH,CAAD,CAAH,GAASjB,SAAtB;AACAiB,MAAAA,CAAC,IAAIf,EAAL;AACD;AACF,GAXH;;AAaAP,EAAAA,CAAC,CAACqB,UAAF,GAAgBK,KAAD,IAAW;AACtBC,IAAAA,QAAQ;AACRC,IAAAA,IAAI,CAAC,GAAD,CAAJ,CAFsB,CAGtB;;AACA,SAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,OAAO,CAACgB,MAA5B,EAAoCF,CAAC,EAArC,EAAyC;AACvCO,MAAAA,OAAO,CAACP,CAAC,GAAGpB,QAAL,EAAe4B,MAAM,GAAG,CAAT,GAAatB,OAAO,CAACc,CAAD,CAAnC,EAAwC,CAAxC,EAA0C,CAA1C,CAAP;AACD;AACF,GAPH;AAQH,CA9CD;;AAgDA,eAAevB,UAAf","sourcesContent":["const testSketch = (p) => {\n    let rotation = 0\n    let xspacing = 1; // Distance between each horizontal location\n    let w; // Width of entire wave\n    let theta = 0.0; // Start angle at 0\n    let amplitude = 35.0; // Height of wave\n    let period = 500.0; // How many pixels before the wave repeats\n    let dx; // Value for incrementing x\n    let yvalues; // Using an array to store height values for the wave\n\n    //初期設定\n    p.setup = () => {\n        p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL)\n        w = width + 1;\n        dx = (TWO_PI / period) * xspacing;\n        yvalues = new Array(floor(w / xspacing));\n    }\n\n\n    p.draw = () => {\n        background(0);\n        calcWave();\n        renderWave();\n      }\n      \n    p.calcWave = () => {\n        // Increment theta (try different values for\n        // 'angular velocity' here)\n        theta += 0.02;\n      \n        // For every x value, calculate a y value with sine function\n        let x = theta;\n        for (let i = 0; i < yvalues.length; i++) {\n          yvalues[i] = sin(x) * amplitude;\n          x += dx;\n        }\n      }\n      \n    p.renderWave = (props) => {\n        noStroke();\n        fill(255);\n        // A simple way to draw the wave with an ellipse at each location\n        for (let x = 0; x < yvalues.length; x++) {\n          ellipse(x * xspacing, height / 2 + yvalues[x], 1,1);\n        }\n      }\n}\n\nexport default testSketch"]},"metadata":{},"sourceType":"module"}