{"ast":null,"code":"var testSketch=function testSketch(p){var rotation=0;var xspacing=9;// Distance between each horizontal location\nvar w;// Width of entire wave\nvar theta=0.0;// Start angle at 0\nvar amplitude=30;// Height of wave\nvar period=650.0;// How many pixels before the wave repeats\nvar dx;// Value for incrementing x\nvar yvalues;// Using an array to store height values for the wave\nvar TWO_PI=2*3.14159;//初期設定\np.setup=function(){// p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL)\np.createCanvas(p.windowWidth*2,100);w=Math.max(p.windowWidth,1600);dx=TWO_PI/period*xspacing;yvalues=new Array(Math.floor(w/xspacing));};//毎フレームごとの描画内容\np.draw=function(){p.background(255);p.calcWave();p.renderWave();p.renderWave2();};p.calcWave=function(){// Increment theta (try different values for\n// 'angular velocity' here)\ntheta+=0.02;// For every x value, calculate a y value with sine function\nvar x=theta;for(var i=0;i<yvalues.length;i++){yvalues[i]=Math.sin(x)*amplitude;x+=dx;}};p.renderWave=function(){p.noStroke();p.fill(186);// A simple way to draw the wave with an ellipse at each location\nfor(var x=0;x<yvalues.length;x++){p.ellipse(x*xspacing,200/4+yvalues[x],1,1);}};p.renderWave2=function(){p.noStroke();p.fill(213);// A simple way to draw the wave with an ellipse at each location\nfor(var x=0;x<yvalues.length;x++){p.ellipse(x*xspacing-50,200/4+yvalues[x]*0.6,2,2);}};};export default testSketch;","map":{"version":3,"sources":["/Users/YuOhno/portfoliov3/src/components/animation/wave.js"],"names":["testSketch","p","rotation","xspacing","w","theta","amplitude","period","dx","yvalues","TWO_PI","setup","createCanvas","windowWidth","Math","max","Array","floor","draw","background","calcWave","renderWave","renderWave2","x","i","length","sin","noStroke","fill","ellipse"],"mappings":"AAAA,GAAMA,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,CAAD,CAAO,CACtB,GAAIC,CAAAA,QAAQ,CAAG,CAAf,CACA,GAAIC,CAAAA,QAAQ,CAAG,CAAf,CAAkB;AAClB,GAAIC,CAAAA,CAAJ,CAAO;AACP,GAAIC,CAAAA,KAAK,CAAG,GAAZ,CAAiB;AACjB,GAAIC,CAAAA,SAAS,CAAG,EAAhB,CAAoB;AACpB,GAAIC,CAAAA,MAAM,CAAG,KAAb,CAAoB;AACpB,GAAIC,CAAAA,EAAJ,CAAQ;AACR,GAAIC,CAAAA,OAAJ,CAAa;AACb,GAAIC,CAAAA,MAAM,CAAG,EAAE,OAAf,CAEA;AACAT,CAAC,CAACU,KAAF,CAAU,UAAM,CACZ;AACAV,CAAC,CAACW,YAAF,CAAeX,CAAC,CAACY,WAAF,CAAc,CAA7B,CAA+B,GAA/B,EACAT,CAAC,CAAGU,IAAI,CAACC,GAAL,CAASd,CAAC,CAACY,WAAX,CAAwB,IAAxB,CAAJ,CACAL,EAAE,CAAIE,MAAM,CAAGH,MAAV,CAAoBJ,QAAzB,CACAM,OAAO,CAAG,GAAIO,CAAAA,KAAJ,CAAUF,IAAI,CAACG,KAAL,CAAWb,CAAC,CAAGD,QAAf,CAAV,CAAV,CACH,CAND,CASA;AACAF,CAAC,CAACiB,IAAF,CAAS,UAAM,CACXjB,CAAC,CAACkB,UAAF,CAAa,GAAb,EACAlB,CAAC,CAACmB,QAAF,GACAnB,CAAC,CAACoB,UAAF,GACApB,CAAC,CAACqB,WAAF,GACH,CALD,CAOArB,CAAC,CAACmB,QAAF,CAAa,UAAM,CACf;AACA;AACAf,KAAK,EAAI,IAAT,CAEA;AACA,GAAIkB,CAAAA,CAAC,CAAGlB,KAAR,CACA,IAAK,GAAImB,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGf,OAAO,CAACgB,MAA5B,CAAoCD,CAAC,EAArC,CAAyC,CACvCf,OAAO,CAACe,CAAD,CAAP,CAAaV,IAAI,CAACY,GAAL,CAASH,CAAT,EAAcjB,SAA3B,CACAiB,CAAC,EAAIf,EAAL,CACD,CACJ,CAXD,CAaAP,CAAC,CAACoB,UAAF,CAAe,UAAM,CACjBpB,CAAC,CAAC0B,QAAF,GACA1B,CAAC,CAAC2B,IAAF,CAAO,GAAP,EACA;AACA,IAAK,GAAIL,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGd,OAAO,CAACgB,MAA5B,CAAoCF,CAAC,EAArC,CAAyC,CACvCtB,CAAC,CAAC4B,OAAF,CAAUN,CAAC,CAAGpB,QAAd,CAAwB,IAAM,CAAN,CAAUM,OAAO,CAACc,CAAD,CAAzC,CAA8C,CAA9C,CAAiD,CAAjD,EACD,CACJ,CAPD,CAUAtB,CAAC,CAACqB,WAAF,CAAgB,UAAM,CAClBrB,CAAC,CAAC0B,QAAF,GACA1B,CAAC,CAAC2B,IAAF,CAAO,GAAP,EACA;AACA,IAAK,GAAIL,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGd,OAAO,CAACgB,MAA5B,CAAoCF,CAAC,EAArC,CAAyC,CACvCtB,CAAC,CAAC4B,OAAF,CAAUN,CAAC,CAAGpB,QAAJ,CAAe,EAAzB,CAA6B,IAAM,CAAN,CAAUM,OAAO,CAACc,CAAD,CAAP,CAAW,GAAlD,CAAuD,CAAvD,CAA0D,CAA1D,EACD,CACJ,CAPD,CASH,CA7DD,CA+DA,cAAevB,CAAAA,UAAf","sourcesContent":["const testSketch = (p) => {\n    let rotation = 0\n    let xspacing = 9; // Distance between each horizontal location\n    let w; // Width of entire wave\n    let theta = 0.0; // Start angle at 0\n    let amplitude = 30; // Height of wave\n    let period = 650.0; // How many pixels before the wave repeats\n    let dx; // Value for incrementing x\n    let yvalues; // Using an array to store height values for the wave\n    let TWO_PI = 2*3.14159;\n\n    //初期設定\n    p.setup = () => {\n        // p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL)\n        p.createCanvas(p.windowWidth*2,100)\n        w = Math.max(p.windowWidth, 1600);\n        dx = (TWO_PI / period) * xspacing;\n        yvalues = new Array(Math.floor(w / xspacing));\n    }\n\n  \n    //毎フレームごとの描画内容\n    p.draw = () => {\n        p.background(255)\n        p.calcWave();\n        p.renderWave();\n        p.renderWave2();\n    }\n\n    p.calcWave = () => {\n        // Increment theta (try different values for\n        // 'angular velocity' here)\n        theta += 0.02;\n      \n        // For every x value, calculate a y value with sine function\n        let x = theta;\n        for (let i = 0; i < yvalues.length; i++) {\n          yvalues[i] = Math.sin(x) * amplitude;\n          x += dx;\n        }\n    }\n\n    p.renderWave = () => {\n        p.noStroke();\n        p.fill(186);\n        // A simple way to draw the wave with an ellipse at each location\n        for (let x = 0; x < yvalues.length; x++) {\n          p.ellipse(x * xspacing, 200 / 4 + yvalues[x], 1, 1);\n        }\n    }\n\n\n    p.renderWave2 = () => {\n        p.noStroke();\n        p.fill(213);\n        // A simple way to draw the wave with an ellipse at each location\n        for (let x = 0; x < yvalues.length; x++) {\n          p.ellipse(x * xspacing - 50, 200 / 4 + yvalues[x]*0.6, 2, 2);\n        }\n    }\n\n}\n\nexport default testSketch"]},"metadata":{},"sourceType":"module"}