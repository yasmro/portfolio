{"ast":null,"code":"const testSketch = p => {\n  let xspacing = 1; // Distance between each horizontal location\n\n  let w; // Width of entire wave\n\n  let theta = 0.0; // Start angle at 0\n\n  let amplitude = 35.0; // Height of wave\n\n  let period = 500.0; // How many pixels before the wave repeats\n\n  let dx; // Value for incrementing x\n\n  let yvalues; // Using an array to store height values for the wave\n\n  function setup() {\n    createCanvas(710, 400);\n    w = width + 1;\n    dx = TWO_PI / period * xspacing;\n    yvalues = new Array(floor(w / xspacing));\n  }\n\n  function draw() {\n    background(0);\n    calcWave();\n    renderWave();\n  }\n\n  function calcWave() {\n    // Increment theta (try different values for\n    // 'angular velocity' here)\n    theta += 0.02; // For every x value, calculate a y value with sine function\n\n    let x = theta;\n\n    for (let i = 0; i < yvalues.length; i++) {\n      yvalues[i] = sin(x) * amplitude;\n      x += dx;\n    }\n  }\n\n  function renderWave() {\n    noStroke();\n    fill(255); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < yvalues.length; x++) {\n      ellipse(x * xspacing, height / 2 + yvalues[x], 1, 1);\n    }\n  }\n};\n\nexport default testSketch;","map":{"version":3,"sources":["/Users/YuOhno/portfoliov3/src/components/animation/testSketch.js"],"names":["testSketch","p","xspacing","w","theta","amplitude","period","dx","yvalues","setup","createCanvas","width","TWO_PI","Array","floor","draw","background","calcWave","renderWave","x","i","length","sin","noStroke","fill","ellipse","height"],"mappings":"AAAA,MAAMA,UAAU,GAAIC,CAAD,IAAO;AAEtB,MAAIC,QAAQ,GAAG,CAAf,CAFsB,CAEJ;;AAClB,MAAIC,CAAJ,CAHsB,CAGf;;AACP,MAAIC,KAAK,GAAG,GAAZ,CAJsB,CAIL;;AACjB,MAAIC,SAAS,GAAG,IAAhB,CALsB,CAKA;;AACtB,MAAIC,MAAM,GAAG,KAAb,CANsB,CAMF;;AACpB,MAAIC,EAAJ,CAPsB,CAOd;;AACR,MAAIC,OAAJ,CARsB,CAQT;;AAEb,WAASC,KAAT,GAAiB;AACfC,IAAAA,YAAY,CAAC,GAAD,EAAM,GAAN,CAAZ;AACAP,IAAAA,CAAC,GAAGQ,KAAK,GAAG,CAAZ;AACAJ,IAAAA,EAAE,GAAIK,MAAM,GAAGN,MAAV,GAAoBJ,QAAzB;AACAM,IAAAA,OAAO,GAAG,IAAIK,KAAJ,CAAUC,KAAK,CAACX,CAAC,GAAGD,QAAL,CAAf,CAAV;AACD;;AAED,WAASa,IAAT,GAAgB;AACdC,IAAAA,UAAU,CAAC,CAAD,CAAV;AACAC,IAAAA,QAAQ;AACRC,IAAAA,UAAU;AACX;;AAED,WAASD,QAAT,GAAoB;AAClB;AACA;AACAb,IAAAA,KAAK,IAAI,IAAT,CAHkB,CAKlB;;AACA,QAAIe,CAAC,GAAGf,KAAR;;AACA,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,OAAO,CAACa,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvCZ,MAAAA,OAAO,CAACY,CAAD,CAAP,GAAaE,GAAG,CAACH,CAAD,CAAH,GAASd,SAAtB;AACAc,MAAAA,CAAC,IAAIZ,EAAL;AACD;AACF;;AAED,WAASW,UAAT,GAAsB;AACpBK,IAAAA,QAAQ;AACRC,IAAAA,IAAI,CAAC,GAAD,CAAJ,CAFoB,CAGpB;;AACA,SAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,OAAO,CAACa,MAA5B,EAAoCF,CAAC,EAArC,EAAyC;AACvCM,MAAAA,OAAO,CAACN,CAAC,GAAGjB,QAAL,EAAewB,MAAM,GAAG,CAAT,GAAalB,OAAO,CAACW,CAAD,CAAnC,EAAwC,CAAxC,EAA0C,CAA1C,CAAP;AACD;AACF;AAEJ,CA7CD;;AA+CA,eAAenB,UAAf","sourcesContent":["const testSketch = (p) => {\n\n    let xspacing = 1; // Distance between each horizontal location\n    let w; // Width of entire wave\n    let theta = 0.0; // Start angle at 0\n    let amplitude = 35.0; // Height of wave\n    let period = 500.0; // How many pixels before the wave repeats\n    let dx; // Value for incrementing x\n    let yvalues; // Using an array to store height values for the wave\n    \n    function setup() {\n      createCanvas(710, 400);\n      w = width + 1;\n      dx = (TWO_PI / period) * xspacing;\n      yvalues = new Array(floor(w / xspacing));\n    }\n    \n    function draw() {\n      background(0);\n      calcWave();\n      renderWave();\n    }\n    \n    function calcWave() {\n      // Increment theta (try different values for\n      // 'angular velocity' here)\n      theta += 0.02;\n    \n      // For every x value, calculate a y value with sine function\n      let x = theta;\n      for (let i = 0; i < yvalues.length; i++) {\n        yvalues[i] = sin(x) * amplitude;\n        x += dx;\n      }\n    }\n    \n    function renderWave() {\n      noStroke();\n      fill(255);\n      // A simple way to draw the wave with an ellipse at each location\n      for (let x = 0; x < yvalues.length; x++) {\n        ellipse(x * xspacing, height / 2 + yvalues[x], 1,1);\n      }\n    }\n    \n}\n\nexport default testSketch"]},"metadata":{},"sourceType":"module"}